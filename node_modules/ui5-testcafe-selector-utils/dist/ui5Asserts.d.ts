/// <reference types="testcafe" />
import { UI5BaseBuilderIntf } from "./ui5Builder";
import { UI5DataResult } from ".";
declare class ui5AssertOperator {
    protected _selector: UI5BaseBuilderIntf;
    protected _testCafeSelector: any;
    protected _propertyName: string;
    protected _lclTestRun: TestController;
    protected _filterFunction: (e: any) => any;
    constructor(selector: UI5BaseBuilderIntf | Selector, t: TestController);
    setPropertyName(name: string): void;
    setDataFunction(t: (e: any) => any): void;
    get toBe(): ui5AssertOperator;
    protected _executeTestcafeExpect(): Assertion<UI5DataResult>;
    greater(val: any, message?: string, options?: AssertionOptions): Promise<any>;
    less(val: any, message?: string, options?: AssertionOptions): Promise<any>;
    equal(val: any, message?: string, options?: AssertionOptions): Promise<any>;
    notEqual(val: any, message?: string, options?: AssertionOptions): Promise<any>;
}
export declare class ui5AssertOperatorCount extends ui5AssertOperator {
    protected _executeTestcafeExpect(): Assertion<any>;
}
export declare class ui5AssertOperatorVisible extends ui5AssertOperator {
    ok(message?: string, options?: AssertionOptions): Promise<void>;
    notOK(message?: string, options?: AssertionOptions): Promise<void>;
}
export declare class ui5AssertOperatorExists extends ui5AssertOperator {
    ok(message?: string, options?: AssertionOptions): Promise<void>;
    notOK(message?: string, options?: AssertionOptions): Promise<void>;
}
declare class ui5AssertDef {
    private _selector;
    private _lclTestRun;
    private get t();
    exists(expectInteractable?: boolean): ui5AssertOperatorExists;
    visible(expectInteractable?: boolean): ui5AssertOperatorVisible;
    count(expectInteractable?: boolean): ui5AssertOperatorCount;
    property(property: string): ui5AssertOperator;
    tableLength(): ui5AssertOperator;
    insideATable(): ui5AssertOperator;
    bindingContextPath(sProp: string): ui5AssertOperator;
    bindingPath(sProp: string): ui5AssertOperator;
    itemdata(sProp: string): ui5AssertOperator;
    context(sProp: string): ui5AssertOperator;
    tableCol(): ui5AssertOperator;
    tableRow(): ui5AssertOperator;
    dynamic(property: (e: UI5DataResult) => any, propName?: string): ui5AssertOperator;
    value(): ui5AssertOperator;
    constructor(selector: UI5BaseBuilderIntf | any, t?: TestController);
}
declare function ui5Assert(selector: UI5BaseBuilderIntf | Selector, t?: TestController): ui5AssertDef;
export { ui5Assert, ui5AssertDef, ui5AssertOperator };
