"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ui5AssertOperator = exports.ui5AssertDef = exports.ui5Assert = exports.ui5AssertOperatorExists = exports.ui5AssertOperatorVisible = exports.ui5AssertOperatorCount = void 0;
var ui5Action_1 = require("./ui5Action");
var ui5Builder_1 = require("./ui5Builder");
var rqTrack = require("testcafe/lib/api/test-run-tracker");
var ui5AssertOperator = /** @class */ (function () {
    function ui5AssertOperator(selector, t) {
        this._testCafeSelector = null;
        this._propertyName = "";
        this._filterFunction = function (e) { return e; };
        this._selector = selector;
        this._testCafeSelector = selector instanceof ui5Builder_1.UI5BaseBuilderIntf ? selector.build() : selector;
        this._lclTestRun = t;
    }
    ui5AssertOperator.prototype.setPropertyName = function (name) {
        this._propertyName = name;
    };
    ui5AssertOperator.prototype.setDataFunction = function (t) {
        this._filterFunction = t;
    };
    Object.defineProperty(ui5AssertOperator.prototype, "toBe", {
        get: function () {
            return this;
        },
        enumerable: false,
        configurable: true
    });
    ui5AssertOperator.prototype._executeTestcafeExpect = function () {
        return this._lclTestRun.expect(this._selector.dataSync(this._filterFunction));
    };
    ui5AssertOperator.prototype.greater = function (val, message, options) {
        return __awaiter(this, void 0, void 0, function () {
            var oStep, oProm;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oStep = ui5Action_1.ui5Steps.addStep(this._lclTestRun, ui5Action_1.ui5StepType.ASSERT_PROPERTY_VALUE, ui5Action_1.ui5StepStatus.QUEUED, this._selector, (this._propertyName + " greater than '" + val.toString() + "'"));
                        return [4 /*yield*/, this._selector.build()];
                    case 1:
                        _a.sent();
                        oProm = this._executeTestcafeExpect().gt(val, message, options);
                        oProm.then(function () {
                            ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.PROCESSED);
                        }, function () {
                            ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.FAILED);
                        });
                        return [2 /*return*/, oProm];
                }
            });
        });
    };
    ui5AssertOperator.prototype.less = function (val, message, options) {
        return __awaiter(this, void 0, void 0, function () {
            var oStep, oProm;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oStep = ui5Action_1.ui5Steps.addStep(this._lclTestRun, ui5Action_1.ui5StepType.ASSERT_PROPERTY_VALUE, ui5Action_1.ui5StepStatus.QUEUED, this._selector, (this._propertyName + " less than '" + val.toString() + "'"));
                        return [4 /*yield*/, this._selector.build()];
                    case 1:
                        _a.sent();
                        oProm = this._executeTestcafeExpect().lt(val, message, options);
                        oProm.then(function () {
                            ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.PROCESSED);
                        }, function () {
                            ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.FAILED);
                        });
                        return [2 /*return*/, oProm];
                }
            });
        });
    };
    ui5AssertOperator.prototype.equal = function (val, message, options) {
        return __awaiter(this, void 0, void 0, function () {
            var oStep, oProm;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oStep = ui5Action_1.ui5Steps.addStep(this._lclTestRun, ui5Action_1.ui5StepType.ASSERT_PROPERTY_VALUE, ui5Action_1.ui5StepStatus.QUEUED, this._selector, (this._propertyName + " equal to '" + val.toString() + "'"));
                        return [4 /*yield*/, this._selector.build()];
                    case 1:
                        _a.sent(); //wait until generally available..
                        oProm = this._executeTestcafeExpect().eql(val, message, options);
                        oProm.then(function () {
                            ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.PROCESSED);
                        }, function () {
                            ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.FAILED);
                        });
                        return [2 /*return*/, oProm];
                }
            });
        });
    };
    ui5AssertOperator.prototype.notEqual = function (val, message, options) {
        return __awaiter(this, void 0, void 0, function () {
            var oStep, oProm;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oStep = ui5Action_1.ui5Steps.addStep(this._lclTestRun, ui5Action_1.ui5StepType.ASSERT_PROPERTY_VALUE, ui5Action_1.ui5StepStatus.QUEUED, this._selector, (this._propertyName + " unequal to '" + val.toString() + "'"));
                        return [4 /*yield*/, this._selector.build()];
                    case 1:
                        _a.sent();
                        oProm = this._executeTestcafeExpect().notEql(val, message, options);
                        oProm.then(function () {
                            ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.PROCESSED);
                        }, function () {
                            ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.FAILED);
                        });
                        return [2 /*return*/, oProm];
                }
            });
        });
    };
    return ui5AssertOperator;
}());
exports.ui5AssertOperator = ui5AssertOperator;
var ui5AssertOperatorCount = /** @class */ (function (_super) {
    __extends(ui5AssertOperatorCount, _super);
    function ui5AssertOperatorCount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ui5AssertOperatorCount.prototype._executeTestcafeExpect = function () {
        return this._lclTestRun.expect(this._testCafeSelector.count);
    };
    return ui5AssertOperatorCount;
}(ui5AssertOperator));
exports.ui5AssertOperatorCount = ui5AssertOperatorCount;
var ui5AssertOperatorVisible = /** @class */ (function (_super) {
    __extends(ui5AssertOperatorVisible, _super);
    function ui5AssertOperatorVisible() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ui5AssertOperatorVisible.prototype.ok = function (message, options) {
        return __awaiter(this, void 0, void 0, function () {
            var oStep, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oStep = ui5Action_1.ui5Steps.addStep(this._lclTestRun, ui5Action_1.ui5StepType.ASSERT_VISIBLE, ui5Action_1.ui5StepStatus.QUEUED, this._selector);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this._lclTestRun.expect(this._testCafeSelector.exists).ok(message, options)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this._lclTestRun.expect(this._testCafeSelector.visible).ok(message, options)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.FAILED);
                        throw err_1;
                    case 5:
                        ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.PROCESSED);
                        return [2 /*return*/];
                }
            });
        });
    };
    ui5AssertOperatorVisible.prototype.notOK = function (message, options) {
        return __awaiter(this, void 0, void 0, function () {
            var oStep, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oStep = ui5Action_1.ui5Steps.addStep(this._lclTestRun, ui5Action_1.ui5StepType.ASSERT_VISIBLE, ui5Action_1.ui5StepStatus.QUEUED, this._selector);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._lclTestRun.expect(this._testCafeSelector.visible).notOk(message, options)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.FAILED);
                        return [2 /*return*/];
                    case 4:
                        ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.PROCESSED);
                        return [2 /*return*/];
                }
            });
        });
    };
    return ui5AssertOperatorVisible;
}(ui5AssertOperator));
exports.ui5AssertOperatorVisible = ui5AssertOperatorVisible;
var ui5AssertOperatorExists = /** @class */ (function (_super) {
    __extends(ui5AssertOperatorExists, _super);
    function ui5AssertOperatorExists() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ui5AssertOperatorExists.prototype.ok = function (message, options) {
        return __awaiter(this, void 0, void 0, function () {
            var oStep, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oStep = ui5Action_1.ui5Steps.addStep(this._lclTestRun, ui5Action_1.ui5StepType.ASSERT_EXISTS, ui5Action_1.ui5StepStatus.QUEUED, this._selector);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._lclTestRun.expect(this._testCafeSelector.exists).ok(message, options)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.FAILED);
                        throw err_3;
                    case 4:
                        ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.PROCESSED);
                        return [2 /*return*/];
                }
            });
        });
    };
    ui5AssertOperatorExists.prototype.notOK = function (message, options) {
        return __awaiter(this, void 0, void 0, function () {
            var oStep, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oStep = ui5Action_1.ui5Steps.addStep(this._lclTestRun, ui5Action_1.ui5StepType.ASSERT_EXISTS, ui5Action_1.ui5StepStatus.QUEUED, this._selector);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._lclTestRun.expect(this._testCafeSelector.exists).notOk(message, options)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.FAILED);
                        return [2 /*return*/];
                    case 4:
                        ui5Action_1.ui5Steps.setStepStatus(oStep, ui5Action_1.ui5StepStatus.PROCESSED);
                        return [2 /*return*/];
                }
            });
        });
    };
    return ui5AssertOperatorExists;
}(ui5AssertOperator));
exports.ui5AssertOperatorExists = ui5AssertOperatorExists;
var ui5AssertDef = /** @class */ (function () {
    function ui5AssertDef(selector, t) {
        if (selector instanceof ui5Builder_1.UI5BaseBuilderIntf) {
            this._selector = selector;
        }
        else {
            this._selector = new ui5Builder_1.UI5AnyValueBuilder(selector);
        }
        this._lclTestRun = t ? t : ui5Action_1.ui5ActionDef.currentTestRun;
    }
    Object.defineProperty(ui5AssertDef.prototype, "t", {
        get: function () {
            try {
                var oRun = rqTrack.resolveContextTestRun(); //try first..
                if (oRun && oRun.controller) {
                    return oRun.controller;
                }
            }
            catch (_a) { }
            ;
            return this._lclTestRun ? this._lclTestRun : ui5Action_1.ui5ActionDef.currentTestRun; //use 
        },
        enumerable: false,
        configurable: true
    });
    ui5AssertDef.prototype.exists = function (expectInteractable) {
        if (expectInteractable === void 0) { expectInteractable = true; }
        var selector = this._selector;
        if (expectInteractable === true) {
            selector = selector instanceof ui5Builder_1.UI5BaseBuilderIntf ? selector.interactable() : selector;
        }
        var oOperator = new ui5AssertOperatorExists(this._selector, this.t);
        return oOperator;
    };
    ui5AssertDef.prototype.visible = function (expectInteractable) {
        if (expectInteractable === void 0) { expectInteractable = true; }
        var selector = this._selector;
        if (expectInteractable === true) {
            selector = selector instanceof ui5Builder_1.UI5BaseBuilderIntf ? selector.interactable() : selector;
        }
        var oOperator = new ui5AssertOperatorVisible(this._selector, this.t);
        return oOperator;
    };
    ui5AssertDef.prototype.count = function (expectInteractable) {
        if (expectInteractable === void 0) { expectInteractable = true; }
        var selector = this._selector;
        if (expectInteractable === true) {
            selector = selector instanceof ui5Builder_1.UI5BaseBuilderIntf ? selector.interactable() : selector;
        }
        var oOperator = new ui5AssertOperatorCount(this._selector, this.t);
        return oOperator;
    };
    ui5AssertDef.prototype.property = function (property) {
        var oOperator = new ui5AssertOperator(this._selector, this.t);
        oOperator.setPropertyName(property);
        var f = new Function('e', 'return e.property["' + property + '"];');
        oOperator.setDataFunction(f);
        return oOperator;
    };
    ui5AssertDef.prototype.tableLength = function () {
        return this.dynamic(function (e) { var _a; return (_a = e === null || e === void 0 ? void 0 : e.tableData) === null || _a === void 0 ? void 0 : _a.finalLength; }, "Final Table Length");
    };
    ui5AssertDef.prototype.insideATable = function () {
        return this.dynamic(function (e) { var _a; return (_a = e === null || e === void 0 ? void 0 : e.tableSettings) === null || _a === void 0 ? void 0 : _a.insideATable; }, "Inside A Table");
    };
    ui5AssertDef.prototype.bindingContextPath = function (sProp) {
        return this.dynamic(function (e) { if (e.bindingContext && e.bindingContext[sProp]) {
            return e === null || e === void 0 ? void 0 : e.bindingContext[sProp];
        }
        else {
            return undefined;
        } }, sProp);
    };
    ui5AssertDef.prototype.bindingPath = function (sProp) {
        return this.dynamic(function (e) { if (e.binding && e.binding[sProp]) {
            return e === null || e === void 0 ? void 0 : e.binding[sProp];
        }
        else {
            return undefined;
        } }, sProp);
    };
    ui5AssertDef.prototype.itemdata = function (sProp) {
        return this.dynamic(function (e) { return e === null || e === void 0 ? void 0 : e.itemdata[sProp]; }, sProp);
    };
    ui5AssertDef.prototype.context = function (sProp) {
        return this.dynamic(function (e) { return e === null || e === void 0 ? void 0 : e.smartContext[sProp]; }, sProp);
    };
    ui5AssertDef.prototype.tableCol = function () {
        return this.dynamic(function (e) { var _a; return (_a = e === null || e === void 0 ? void 0 : e.tableSettings) === null || _a === void 0 ? void 0 : _a.tableCol; }, "Table Column");
    };
    ui5AssertDef.prototype.tableRow = function () {
        return this.dynamic(function (e) { var _a; return (_a = e === null || e === void 0 ? void 0 : e.tableSettings) === null || _a === void 0 ? void 0 : _a.tableRow; }, "Table Row");
    };
    ui5AssertDef.prototype.dynamic = function (property, propName) {
        var oOperator = new ui5AssertOperator(this._selector, this.t);
        oOperator.setDataFunction(property);
        if (propName) {
            oOperator.setPropertyName(propName);
        }
        return oOperator;
    };
    ui5AssertDef.prototype.value = function () {
        var oOperator = new ui5AssertOperator(this._selector, this.t);
        oOperator.setDataFunction(function (e) { return e; });
        return oOperator;
    };
    return ui5AssertDef;
}());
exports.ui5AssertDef = ui5AssertDef;
function ui5Assert(selector, t) {
    return new ui5AssertDef(selector, t);
}
exports.ui5Assert = ui5Assert;
//# sourceMappingURL=ui5Asserts.js.map